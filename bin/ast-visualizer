#!/usr/bin/env php
<?php declare(strict_types=1);

namespace Hirokinoue\AstVisualizer;

use Hirokinoue\AstVisualizer\Visitor\AstDiagramCreator;
use Hirokinoue\AstVisualizer\Visitor\ClassDiagramCreator;
use Hirokinoue\AstVisualizer\Visitor\SimpleTextDiagramCreator;
use Monolog\Logger;
use Monolog\Handler\StreamHandler;
use RuntimeException;

if (count($argv) < 2 || 5 < count($argv)) {
    fwrite(STDERR, 'Usage: ast-visualizer <target php file> ast|node|text' . PHP_EOL .
        'Diagram format can be specified by space separated values such as "ast node text".'
    );
    exit(1);
}

foreach ([__DIR__ . '/../../../autoload.php', __DIR__ . '/../vendor/autoload.php'] as $autoload) {
    if (file_exists($autoload)) {
        require $autoload;
        break;
    }
}

$currentWorkingDirectory = getcwd();
if ($currentWorkingDirectory === false) {
    throw new RuntimeException('Cannot get current working directory.');
}
define("WORKING_DIR", $currentWorkingDirectory);

$logger = new Logger('ast visualizer');
$logger->pushHandler(new StreamHandler(WORKING_DIR .'/ast-visualizer.log'));

$targetPhpFile = $argv[1];
if (!file_exists($targetPhpFile)) {
    fwrite(STDERR, sprintf('File not found: %s.', $targetPhpFile) . PHP_EOL);
    exit(1);
}

$code = file_get_contents($targetPhpFile);
if ($code === false) {
    fwrite(STDERR, sprintf('Cannot get contents: %s.', $targetPhpFile) . PHP_EOL);
    exit(1);
}

$formats = [];
if (count($argv) > 2) {
    $argFormats = array_slice($argv, 2);
    foreach (array_unique($argFormats) as $format) {
        if ($format === 'ast') {
            $formats[] = new AstDiagramCreator($logger);
        } elseif ($format === 'node') {
            $formats[] = new ClassDiagramCreator();
        } elseif ($format === 'text') {
            $formats[] = new SimpleTextDiagramCreator($logger);
        }
    }
}
if (count($formats) === 0) {
    $formats[] = new AstDiagramCreator($logger);
}

$ok = (new AstVisualizer($formats, $logger))->analyze($code);

if ($ok) {
    $logger->info(sprintf('Analysis finished: %s', $targetPhpFile));
    exit(0);
}

exit(1);

